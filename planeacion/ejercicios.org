#+title: Ideas para ejercicios en clase
#+author: Gunnar Wolf
#+email: sistop@gwolf.org
#+language: es

* Administración de procesos

** Concurrencia

*** Demasiada leche

#+BEGIN_CENTER
Plantear un algoritmo grupalmente; asignar a dos personas como $P_1$
y $P_2$. El profesor interrumpe (planifica) a los procesos.
#+END_CENTER

Planteamiento: De los apuntes de clase de /NachOS/:
http://http.cs.berkeley.edu/~tea/cs162sp95/notes/l5.ps

- Dos personas comparten un refrigerador muy chiquito. ¿Cómo evitar
  que ambos se den cuenta que no hay leche, y compren al mismo
  tiempo, sin que tengan que esperarse y comunicarse expresamente
  entre sí?

  Proponer/inducir pasar +- por los siguientes pasos:

  1. Proponer/inducir algo del tipo de:

    #+BEGIN_SRC C
      if (no_hay_leche()) {
        if (no_hay_nota()) {
          deja_nota();
          compra_leche();
          quita_nota();
        }
       }
    #+END_SRC

    Problema: Condición de carrera; puede haber cambio de contexto
    entre =no_hay_leche()= y =deja_nota()=, y ambos hilos compran leche

  2. Separar en dos hilos:

     #+caption: Hilo A
     #+BEGIN_SRC C
       deja_nota(A);
       if (! nota(B)) {
         if (no_hay_leche()) {
           compra_leche();
         }
        }
       quita_nota(A);
     #+END_SRC

     #+caption: Hilo B
     #+BEGIN_SRC C
       deja_nota(B);
       if (! nota(A)) {
         if (no_hay_leche()) {
           compra_leche();
         }
        }
       quita_nota(B);
     #+END_SRC

     Un cambio de contexto en el momento equivocado lleva a la
     inanición.

  3. Separar en dos hilos, con lógicas distintas
     #+caption: Hilo A
     #+BEGIN_SRC C
       deja_nota(A);
       while (nota(B)) {
         sleep(1);
         if (no_hay_leche()) {
           compra_leche();
         }
        }
       quita_nota(A);
     #+END_SRC

     #+caption: Hilo B
     #+BEGIN_SRC C
       deja_nota(B);
       if (! nota(A)) {
         if (no_hay_leche()) {
           compra_leche();
         }
        }
       quita_nota(B);
     #+END_SRC

  Resultado: La tercer opción funciona, pero es subóptima:
  Complicada de encontrar/desarrollar, código diferente para dos
  hilos. A mayor complejidad sería imposible no meter bugs.

  Presentar a los alumnos primitivas básicas de sincronización (un
  mutex) implementado por el planificador. Demostrar que puede
  funcionar simplemente con:

  #+BEGIN_SRC C
    lock->acquire();
    if (no_hay_leche()) {
      compra_leche();
     }
    lock->release();
  #+END_SRC
