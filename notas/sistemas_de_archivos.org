#+SETUPFILE: ../setup_notas.org
#+TITLE: Sistemas Operativos — Sistemas de archivos

* Generalidades

Un /sistema de archivos/ es la estructura por medio de la cual el
sistema operativo organiza y presenta las abstracciones necesarias
para la organización a largo plazo de la información (típicamente) en
un dispositivo /persistente/.

El sistema de archivo que elijamos o implementemos debe tomar en
cuenta por un lado las características físicas del medio que empleará,
y por el otro las necesidades del sistema a crear. Por ejemplo:

- Tiempo de acceso necesario para realizar una operación: Cinta ≫
  Floppy ≫ Disco duro > Disco duro /inteligente/ ≈ Flash > NVRAM ≫ RAM

- Forma de acceso presentada al sistema: Secuencial (cinta), bloques
  con referencia de direccionamiento física (floppy, disco duro),
  bloques consecutivos (disco duro /inteligente/, Flash, NVRAM, RAM

- Tipo de sistema: ¿Multiusuario? ¿Multiproceso? ¿Embebido? ¿Uso
  genérico?

- Uso esperado del medio: Fijo / transportable → Impacto no sólo en
  estrategias de almacenamiento, sino que de compatibilidad con una
  gama más amplia de equipos.

Hay programas de ámbito especializado que no emplean sistemas de
archivos para el almacenamiento de su información. Principalmente,
estos son gestores de bases de datos que, dada la naturaleza altamente
regular y predecible de la información que manejan, permiten trabajar
con /dispositivos crudos/ (esto es, particiones gestionadas por ellos,
e invisibles a los demás programas). Esto es partiendo de la lógica
que hacerlo de esta manera evita tener que atravesar capas
innecesarias de abstracción y busca un mejor rendimiento al trabajar
tan cerca como sea posible del hardware subyacente. Esta técnica, sin
embargo, cada vez es menos común por la forma menos transparente de
operación que tienen los dispositivos (y que veremos posteriormente).

** Conceptos básicos

- Disco :: Dispositivo en el que se almacena la información
           (independientemente del tipo de medio que sea). Define un
           /tamaño de bloque/, que es la unidad de información que
           puede almacenar con una sóla operación (típicamente 512
           bytes).

	   Si bien un sistema de archivos puede implementarse sobre
	   medios de muy distinta naturaleza, por la carga histórica
	   de ser el medio primario de almacenamiento permanente, a lo
	   largo de esta sección nos referiremos a /disco/ como el
	   medio genérico, incluso si hablamos de sistemas de archivos
	   virtuales o sobre memorias de /estado sólido/.
- Partición :: Una subdivisión de un disco, por medio de la cual el
               administrador/usuario del sistema puede definir la
               forma en que se emplea el espacio de un disco. Un disco
               puede tener varias particiones, y cada una de ellas
               puede tener un sistema de archivos independiente.
- Volumen :: Colección de bloques /inicializados/ con un sistema de
             archivos que pueden presentarse al usuario como una
             unidad. Típicamente un volumen coincide con una
             partición (pero no siempre es el caso).
- Superbloque :: El área del volumen que contiene la /información
                 crítica/ de éste: Su capacidad, tipo de sistema de
                 archivo, nombre/etiqueta, etc.
- Archivo :: La estructura primaria del sistema de archivos: Relaciona
             un /nombre de archivo/ con la información que éste
             representa.

	     Desde el punto de vista de los procesos, el sistema
	     /guarda/ o /recupera/ la información /en/ un archivo; el
	     archivo tiene un /nombre/ por medio del que se le identifica.
- Directorio :: Casi todos los sistemas de archivos en uso hoy en día
                implementan una /jerarquía maestra/ en la cual se
                ubican los archivos. Esta jerarquía se presenta
                típicamente como un árbol — Un /grafo acíclico/ que
                proporciona /rutas únicas/ para la ubicación lógica de
                cada uno de los archivos.
- Metadatos :: Información acerca de un archivo que no es el archivo
               mismo. Por ejemplo, el nombre, tamaño o tipo del
               archivo, su propietario, el control de acceso, sus
               fechas de creación, último acceso y modificación, etc.
- I-nodo o bloque de control de archivo (/FCB/) :: La estructura en
     disco que guarda los metadatos de cada archivo, proporcionando un
     vínculo entre la /entrada en el directorio/ y la información que
     referida.

* Concepto y tipos de archivos

Unix introdujo el concepto de que /todo es un archivo/: En el sistema
Unix original, todos los dispositivos podían ser controlados a través
de un /archivo especial/ que, en vez de almacenar información, apunta
a estructuras en el sistema que controlan a cada dispositivo. Este
concepto sobrevive en los sistemas derivados de Unix al día de hoy,
aunque varias clases de dispositivo rompen esta lógica. El sistema
operativo /Plan9/ de Bell Labs hace mantiene y amplía este concepto e
introduce los /espacios de nombres mutables/, que presenta con
interfaz de archivo archivos prácticamente cualquier objeto empleado
por el sistema.

** Archivos de dispositivo

Las principales estructuras relacionadas que encontraremos en un
sistema tipo Unix son:

- Dispositivos de caracteres :: Dispositivos con los cuales la
     información es leída o escrita un caracter a la vez y se
     presentan como /streams/ (flujos) de información, ya sea
     entrante, saliente o mixta. Algunos pueden permitir operaciones
     adicionales (por ejemplo, rebobinado), pero la manipulación de la
     información se efectúa de forma secuencial.

     Ejemplos: Impresora, unidad de cinta, modem
- Dispositivos de bloques :: Dispositivos que presentan una interfaz
     de /acceso aleatorio/ y entregan o reciben la información en
     /bloques/ de tamaño predeterminado.

     El ejemplo más claro de este tipo de dispositivos es una unidad
     de disco o una de sus particiones.

** Ligas

Las ligas son objetos que ocupan un espacio en el directorio, pero
/apuntan/ a un archivo distinto, cuya información está en otro lugar
del sistema de archivos o con otro nombre; la información que
almacenan es el nombre del archivo destino.

Las ligas simbólicas pueden ser /relativas/ (indicando la ruta a
partir de la ubicación en que está) o /absolutas/ (indicando la ruta a
partir de la raiz).

El archivo destino puede estar en otro sistema de archivos montado en
el sistema.

Diferentes sistemas operativos implementan esquemas semejantes
(p.ej. los /accesos directos/ en Windows), con diferentes grados de
transparencia ante las aplicaciones.

Es importante no confundir las /ligas simbólicas/ con las /ligas
duras/, que abordaremos más adelante.

** Herramientas de comunicación entre procesos

Muy frecuentemente, dos procesos (relacionados o no en el árbol de
procesos) tienen que intercambiar información a lo largo de su ciclo
de vida. Si bien sería posible hacerlo a través de una interfaz de
memoria compartida y envío de mensajes, muchas veces es más fácil
emplear un archivo como si fuera un dispositivo de datos o una
conexión en red. En Unix contamos con los siguientes tipos de archivo
para este fin:

- /Named pipes/ :: Se traduciría literalmente como /tuberías con
                   nombre/. Representan un mecanismo de IPC
                   (comunicación entre procesos) que permite que dos
                   procesos no relacionados se comuniquen de forma
                   unidireccional: Uno abre el archivo para escritura,
                   el otro para lectura, y lo que el primero
                   "deposite" en el archivo, el segundo lo recibirá
                   como entrada.
- Sockets :: (Unix domain sockets, sockets de dominio Unix). Mecanismo
             de comunicación bidireccional similar al de los /named
             pipes/, pero más completo, permitiendo comunicación
             bidireccional de un modo muy similar al de la
             comunicación entre dos procesos en red.

** Archivos con estructura

La razón principal de la existencia del sistema de archivos son /los
archivos/. Un archivo almacena información de /algún tipo/,
estructurado o no estructurado.

La mayor parte de los sistemas operativos maneja únicamente archivos
/sin estructura/ — Cada aplicación es responsable de preparar la
información de forma congruente, y la responsabilidad del sistema
operativo es únicamente entregarlo como un conjunto de bytes. Ha
habido sistemas de archivos históricos, como IBM CICS (1968), IBM MVS
(1974) o DEC VMS (1977), que administraban ciertos tipos de datos en
un formato básico de /base de datos/.

** /Forks/ de datos y de recursos

En el sistema operativo MacOS (1984), empleando HFS (Hierarchical File
System, Sistema de Archivos Jerárquico), se introdujo un mecanismo
para permitir al sistema operativo saber cómo se manejaría un archivo
/sin tener que abrir el archivo completo/ (por cuestiones de
rendimiento principalmente): el /fork de datos/ y el /fork de
recursos/ (data fork, resource fork). El /fork de datos/ contiene a la
información del archivo propiamente, mientras que el /fork de
recursos/ tiene el icono que se presenta al usuario en la interfaz
gráfica (incluso la /posición/ donde este icono será mostrado), el
programa encargado de manipularlo, preferencias, etc.

* Esquema general de un sistema de archivos

Hay una serie de estructuras básicas que se repiten prácticamente en
todos los sistemas operativos diseñados en las últimas décadas:

- Superbloque :: El descriptor primario del sistema de archivos;
                 incluye la /firma/ del sistema de archivos empleado
                 para permitir su identificación por parte del sistema
                 operativo, y otros datos básicos (como tamaño del
                 sistema de archivos, tamaño del bloque, etiqueta,
                 etc.)

- Directorio raiz :: La estructura base con el listado de nombres de
     archivo. Típicamente sólo almacena los archivos que están en el
     /primer nivel jerárquico/ del directorio, y los directorios
     derivados son únicamente referenciados desde éste.

     El directorio normalmente incluye sólo el nombre de cada uno de
     los archivos y el número de /I-nodo/ que lo describe.

- I-nodos :: La estructura que vincula a una entrada de directorio con
             la información propiamente almacenada en el archivo es el
             I-nodo (nomenclatura Unix: Nodo de información; conocido
             también como FCB, /File Control Block/).

	     La información almacenada incluye los permisos y
	     propietarios del archivo y la /relación de bloques/ que
	     ocupa en el disco. Veremos más adelante los esquemas más
	     comunes para presentar esta relación de bloques.

#+begin_center
[[./img/inode_addr.png]]

Practical File System Design, p.12
#+end_center

- Bitmap :: La función del bitmap es poder gestionar el espacio libre
            del disco. Recordemos que el disco se presenta asignado
            por /bloques/, típicamente de 4096 bytes — En el bitmap
            cada bloque se representa con un bit, con lo que aquí
            podemos encontrar de forma compacta el espacio ocupado y
            disponible, así como el lugar adecuado para crear un nuevo
            archivo.

	    El bitmap para un disco de 100GB puede, de esta manera,
            representarse en 23MB ($100 \times 10^9 \over 4096$),
            cantidad que puede razonablemente mantener en memoria un
            sistema de escritorio promedio hoy en día.

	    Veremos más adelante algunas estructuras avanzadas que
            permiten mayor eficiencia en este sentido.

* Direccionamiento directo e indirecto

Los límites de un sistema de archivos vienen de una serie de
decisiones de diseño, y hay varias estrategias que se han ido
desarrollando para lidiar con estos límites. Veremos aquí lo relativo
a la capacidad máxima de los sistemas de archivos.

Todo sistema de archivos tiene límites máximos en relación a la
cantidad de datos que pueden ser direccionados. Este límite es dado
por el producto del tamaño de bloque por la longitud de sus
direcciones.

** Ejemplo: FAT

Un ejemplo de un sistema de archivos sencillo, y de direccionamiento
estrictamente directo, con muy largo tiempo en uso y al mismo tiempo
una muy amplia base instalada son los basados en FAT (MS-DOS en
adelante).

#+begin_center
[[./img/fat.png]]

https://en.wikipedia.org/wiki/File_Allocation_Table#Layout
#+end_center

En su primer implementación, FAT12 (MS-DOS < 3.3) manejaba
direccionamiento de 12 bits y /clusters/ tamaño fijo, de 8 bloques de
512 bytes (4096 bytes). 12 bits permite direccionar hasta 4096
posiciones independientes, por lo que el tamaño máximo de partición
que podía manejar era de 16MB.

Al introducirse FAT16 en 1984, la principal ventaja fue /menor espacio
desperdiciado/ dado que para el mismo disco duro los clusters podían
ser de menor número de sectores.

El sistema de archivos FAT tuvo varias revisiones menores; la última
importante fue en 1996, FAT32, con espacio de direccionamiento de 28
bits y tamaño de cluster de entre 1 y 8 sectores (512 y 4096 bytes),
lo cual permite particiones de hasta 16TB.

** Ejemplo: FFS

Como segundo ejemplo podemos referirnos al /Sistema de Archivos Ágil
de Berkeley/ (Berkeley Fast File System, FFS).

* Organización y acceso a archivos
* Estructura de los directorios
* Estructura de los sistemas de archivos
* Métodos de asignación
* Administración del espacio libre

* Particularidades de medios: Cuando no es un disco

Ver: [[http://lwn.net/Articles/528617/][JFFS2, UBIFS, and the growth of flash storage]]
* Otros recursos
- Practical File System Design (Dominic Giampaolo, 1999): El autor fue
  parte del equipo que implementó el sistema operativo BeOS, un
  sistema de alto rendimiento pensado para correr en estaciones de
  alto rendimiento, particularmente enfocado al video. El proyecto
  fracasó a la larga, y BeOS (así como BeFS, el sistema que describe)
  ya no se utilizan. Este libro tiene una muy buena descripción de
  varios sistemas de archivos, y aborda a profundidad técnicas que
  hace 15 años eran verdaderamente novedosas, y hoy forman parte de
  casi todos los sistemas de archivos con uso amplio, e incluso
  algunas que no se han logrado implementar y que BeFS sí ofrecía.

- [[http://www.cs.berkeley.edu/~brewer/cs262/FFS.pdf][A Fast File System for UNIX]] (Marshall Kirk Mckusick, William N. Joy,
  Samuel J. Lefler, Robert S. Fabry, 1984)

- [[http://www.cs.berkeley.edu/~brewer/cs262/LFS.pdf][The Design and Implementation of a Log-Structured File System]]
  (Mendel Rosenblum, J. K. Ousterhout, 1992)

- [[http://www.nongnu.org/ext2-doc/][The Second Extended File System: Internal Layout]] (Dave Poirier,
  2001-2011)

- [[http://www.cyanezfdz.me/nilfs2-en-linux.html][NILFS2 en Linux]] (César Yáñez)

- [[http://www.cyanezfdz.me/los-discos-desde-la-perspectiva-de-un-sistema-de-archivos.html][Los discos desde la perspectiva de un sistema de archivos]] (César
  Yáñez)

- [[http://lwn.net/Articles/529077/][A hash-based DoS attack on Btrfs]] (LWN)

- [[http://linux.slashdot.org/story/12/12/15/0055217/denial-of-service-attack-found-in-btrfs-file-system][Denial-of-Service Attack Found In Btrfs File-System]] (Slashdot)
