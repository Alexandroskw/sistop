#+SETUPFILE: ../setup_laminas.org
#+TITLE: Introducción a los sistemas operativos
#+DATE: 2013-01-30 — 2013-02-08

* ¿Qué son y qué hacen?

** ¿Qué es un sistema operativo?
- El /sistema base/ de una computadora
- El programa que /siempre corre/
- Gestor de los /recursos/ del sistema
- Lo que define /qué es compatible/ y /qué no/ dentro de una
  determinada arquitectura de hardware
- …

** …¿Qué /no/ es?
- Los programas básicos para administrar archivos
- La forma en que el usuario /lanza/ programas
- El ambiente con que interactúa el usuario
  - Entorno gráfico
  - Línea de comando
  - …

** ¿Qué brinda al /programador/?
- Abstracción (/embellecimiento/ -Finkel)
- Gestión de recursos
- Aislamiento y protección
** Abstracción
#+begin_center
Proporciona /abstracciones consistentes/ y /simplificaciones/ a los
procesos del usuario
#+end_center
- Archivos y directorios
- /Flujos de caracteres/ (entrada/salida)
- El mismo concepto de /proceso/

** Gestión de recursos
#+begin_center
Administra los /recursos existentes/ en la computadora, permitiendo la
ejecución a los diversos procesos
#+end_center
- Cómo comparten los diversos procesos los recursos existentes (y
  rivales)
- Políticas de asignación (y recuperación) justas

** Aislamiento y protección
#+begin_center
Protección de los datos, de los recursos, de los procesos
#+end_center
- Entre procesos
- Entre usuarios
- Ante procesos /mal comportados/
- Ante procesos maliciosos

** Ahora sí… ¿Qué es un sistema operativo?
- El principal programa que corre en una computadora de propósito
  general
- Provee una serie de abstracciones básicas a los programas
  - Pueden haber diferentes sistemas operativos, definiendo distintas
    /interfaces/, sobre el mismo hardware
  - Un mismo sistema operativo puede /adecuarse a/ distintas
    arquitecturas de hardware
- Ofrece una infraestructura de gestión, aislamiento y protección de
  recursos
- Permite la implementación de /entornos operativos/

* Historia y evolución

** Construyendo a través de la historia
#+begin_center
Para comprender lo que hoy gestionan los sistemas operativos,
comencemos viendo cómo es que llegaron a gestionarlo.
\vfill
Vamos con un repaso histórico de la historia de la computación,
enfocados a las /inovaciones/ de cada etapa
#+end_center

** En el principio…
- Arquitectura /von Neumann/ (programa almacenado)
- Programación directa y explícita para el hardware
- Tiempo de programación -> tiempo /no productivo/ -> desperdicio de
  recursos

** Sistemas de proceso por lotes (/batch processing/)
- Los programadores codifican su código en un medio de almacenamiento
  (/tarjetas perforadas/)
- Entregan los tambaches (/batches/) a los operadores
- Los operadores cargan secuencialmente los trabajos, entregan los
  resultados conforme se presentan

** Sistemas monitor en el proceso por lotes
- Implementan protección evitando la corrupción de /otros trabajos/
  - Interactuar con el lector de tarjetas (corrompiendo el siguiente
    programa)
  - Temporizadores y alarmas para evitar ciclos infinitos
- Estas medidas de protección requieren /modificación del hardware/
  - Noción de /instrucciones privilegiadas/

** Sistemas en lotes con /spool/
- ¿Spool? Bobina, o /Simultaneous Peripherial Operations On-Line/
- Cintas magnéticas
  - Carga intermedia de tarjeta a cinta
  - Resultados a cinta para posterior impresión
- Liberando los trabajos más lentos
  - Empleo de equipos /periféricos/ especializados

** Sistemas multiprogramados
- Diferentes etapas en la vida de un proceso: /limitado por CPU/,
  /limitado por entrada-salida/
- Para maximizar el uso de recursos, ejecutar /simultáneamente/ varios
  procesos
  - Requiere cambios fuertes en el hardware
  - Protección de recursos — Espacio de memoria
  - Recursos /estrictamente secuenciales/ requieren /bloqueos/ para
    ofrecer /acceso exclusivo/
- El monitor es invocado con mucha mayor frecuencia por los
  temporizadores
  - /Cambios de contexto/
- Interacción con el equipo: Se mantiene como el modelo en lotes

** Sistemas de tiempo compartido
- 1960s: Sistemas /interactivos/ y /multiusuarios/
- Manejo de /terminales/ para la interacción (teletipos, CRTs)
- Abstracciones de almacenamiento: Archivos, directorios en discos
- Ventajas al programador:
  - Interacción directa con el equipo
  - Edición interactiva
  - Compilación parcial
  - Ejecución inmediata
  - Bibliotecas de sistema
- Complejidad técnica
  - Requisito de múltiples cambios de contexto por segundo

** Tipos de multitarea
- /Cooperativa/ o /no apropiativa/ :: (cooperative multitasking) Cada
     proceso tiene control del CPU hasta que efectúa una /llamada al
     sistema/ o indica al sistema que puede tomar el control (=yield=)

- /Preventiva/ o /apropiativa/ :: (preemptive multitasking) El reloj
     del sistema interrumpe la ejecución de cada proceso transfiriendo
     /forzosamente/ el control al sistema operativo

** Clases de procesos
#+begin_center
¿Qué procesos son más importantes?
#+end_center
- Procesos interactivos :: El usuario tiene la /experiencia/ de la demora
- Del sistema :: Procesos no postergables
- Por nivel de usuario :: Hay usuarios más importantes que otros
- /…Asegún el sapo/ :: Cada situación puede ameritar una política
     diferente
#+begin_center
Los procesos se organizan en /colas de prioridad/ según las políticas
requeridas por cada sistema
#+end_center

* Computadoras personales
** Nacimiento de las computadoras personales
- En los 1970s comienzan a aparecer las computadoras personales
- En un principio, programadas a través de /switches/, con resultados
  a través de LEDs
#+attr_latex: width=0.5\textwidth
#+caption: Microcomputadora Altair 8800 (1975, ~US$600)
[[../img/altair.jpg]]

** La era de los 8 bits (~1977-1985)
- /Microprocesadores/ de 8 bits y miniaturización
  - Salida a video (tipo TV)
  - Entrada por teclado
  - Entrada opcional por cinta, primeros diskettes
- Programación en BASIC (intérprete en ROM)
#+attr_latex: width=0.4\textwidth
#+caption: Commodore Pet 2001 (1977)
[[../img/commodore_pet.jpg]]

** La era de los 8 bits (~1977-1985)
- Comienzan a manejarse /dispositivos/: Unidades de cinta, unidades de
  disco, impresoras, modems, etc.
- Muchas arquitecturas mutuamente incompatibles
- Explosión de la industria de los videojuegos

** La microcomputadora seria: Familia PC (1981)
#+latex: \begin{columns}\begin{column}{0.3\textwidth}
#+attr_latex: width=\textwidth
#+caption: Computadora IBM PC modelo 5150 (1981)
[[../img/ibmpc.jpg]]
#+latex: \end{column}\begin{column}{0.6\textwidth}
- Primer computadora de una empresa seria, orientada a su uso en
  ambiente empresarial
- Separan el /entorno de desarrollo/ del /entorno de programación/, se
  populariza la /distribución de binarios/
- Entorno primario de ejecución: /Línea de comando/ (PC-DOS, MS-DOS)
- Al día de hoy sigue siendo la arquitectura predominante
#+latex: \end{column}\end{columns}

** Entorno gráfico (WIMP) (1984)
#+latex: \begin{columns}\begin{column}{0.3\textwidth}
#+attr_latex: width=0.5\textwidth
#+caption: Apple Macintosh (1984)
[[../img/mac128.png]]
#+caption: Commodore Amiga 1000 (1985)
#+attr_latex: width=0.6\textwidth
[[../img/A1000.jpg]]
#+latex: \end{column}\begin{column}{0.6\textwidth}
- Ventanas, iconos, menúes, apuntador (/Windows, Icons, Menus,
  Pointer/)
- 1984: Apple Macintosh, primer sistema WIMP con éxito comercial
- Multiprocesos, /no multitarea/
- Los programadores /tienen que pensar en concurrencia/
- Multitarea preventiva real: 1985 (Amiga, Atari ST)
  - Sin hardware de protección
#+latex: \end{column}\end{columns}

** La profesionalización del escritorio
- Fines de los 1980 — Intel 80486, Motorola 68040, PowerPC: Hardware
  tan capaz como el de las /estaciones de trabajo/
- Reducción de las arquitecturas alternativas
- Reemplazo paulatino de los sistemas operativos por otros más capaces
  (o mejor /mercadeados/)
  - Mención breve de casos: DOS, Windows y OS/2; AmigaOS y Atari ST;
    NeXT y MacOS

** Convergen Unix y las computadoras /humildes/
- Unixes históricos para computadoras personales: Xenix, A/UX, SCO.
  - Muy limitados por su hardware
  - Precio desproporcionadamente alto; mejor ir por una /estación de
    trabajo/
- Génesis del software libre /ideológico/: GNU (1984)
- 386/BSD: Primer sistema /casi/ libre
- Linux (1991+); GNU/Linux
- El mundo *BSD
- ...Eventual muerte de las estaciones de trabajo
  - Apollo, Digital, Sun, SGI, HP (PA/RISC), …
** El mercado de los dispositivos (/appliances/)
- 1990s: Agendas digitales inteligentes
  - Que se van /inflando/ en computadoras completas
- 2000s: Ruteadores, modems inteligentes, controladores de TV
  (/set-top boxes/)
- 2007+: Teléfonos celulares /inteligentes/, tabletas — Por fin
  exitosos (tras incontables fracasos)
#+begin_center
¿Cuál es la diferencia entre estos equipos y nuestras computadoras de
escritorio?
#+end_center
** Arquitecturas hardware en boga hoy
- En escritorios y servidores: Derivada de PC (Intel x86)
- En dispositivos embebidos ARM (ocasionalmente MIPS)
  - ARM como alternativa de bajo consumo para servidores
- Sigue habiendo un importante espacio a controladores que no
  requieren sistema operativo (p.ej. Arduino)
  - Probablemente siempre lo habrá

* Estructuras básicas
** Continuando con la introducción…
#+BEGIN_CENTER
Seguimos con…

Algunos conceptos base que se presentarán repetidamente a lo largo
del curso.

Algunos conceptos sin demasiada hilación temática — pero que se harán
fundamentales
#+END_CENTER
** Separación /espacio núcleo/ y /espacio usuario/
- Evolución de los tipos de /modo protegido/ de los sistemas monitores
  - ¿Dos modos? ¿Más modos?
- Código con diferentes roles
  - Lo que hace el sistema operativo vs. las aplicaciones del usuario
- ¿Cómo se /brinca/ entre un modo y otro?
** Organización del sistema operativo
#+BEGIN_CENTER
¿Hasta dónde llega el sistema operativo?

¿Hasta dónde llega el código que corre en modo protegido/espacio
núcleo?
#+END_CENTER
- Monolítico :: Todas las operaciones privilegiadas en el mismo
                /super-proceso/.
- Microkernel :: Un núcleo con el mínimo posible de funcionalidad,
                 descargando en /procesos especiales/ ciertas tareas
- Híbridos :: Sistemas que entran mayormente en una categoría, pero
              tienen alguna excepción
** Monolíticos
- La mayor parte de los sistemas históricamente

- Más fáciles de diseñar
  - (¡No es lo mismo que /diseño más simple/!)

- Estructuras compartidas directamente entre subsistemas

- Más rápidos (menos /cambios de contexto/)

- Difícil transición a un entorno multiprocesador
** Microkernel
- Se delegan a /espacio usuario/ todos los procesos que sea posible
  - p.ej. sistemas de archivos, planificación de procesos,
    administración de memoria, dispositivos, modelo de seguridad…

- Código resultante /más limpio/
  - Interfaces claras, separación de responsabilidades
  - Seguridad: Verificabilidad, /auto-reparación/
  - Más fácil pasar a multiprocesador

- Más lentos
  - Típicamente basados en /paso de mensajes/
  - Requieren más cambios de contexto

- Más difíciles de implementar correctamente
** Monolítico / microkernel / mixto: Esquema
#+attr_latex: width=\textwidth
[[../img/monolithic_micro_hybrid.png]]

** ¿Tiempo de acceso? ¿Tasa de transferencia?
#+BEGIN_CENTER
Manejaremos muchas mediciones de velocidad. Debemos siempre tener en cuenta:
#+END_CENTER
- Tiempo de acceso :: ¿Cuánto tiempo toma /iniciar/ una
     transferencia? (medido en s, ms, ns)
- Tasa de transferencia :: Una vez iniciada, ¿a qué velocidad
     /sostenida/ podemos mantenerla? (medido en b/s, Kb/s, Mb/s)
#+BEGIN_CENTER
En el /mejor caso/, la transferencia de $x$ bits nos tomará $t_a +
xt_t$
#+END_CENTER
** Tipos de almacenamiento
#+BEGIN_CENTER
¿Cómo representar y guardar /adecuadamente/ los datos e instrucciones?
#+END_CENTER
- La memoria rápida es muy cara
- La memoria barata es muy lenta (hasta 1000 veces más lenta que el procesador)
- El almacenamiento /a largo plazo/ es mucho más barato, pero
  muchísimo más lento
  - El almacenamiento primario es /volátil/
  - Los discos llegan a ser /millones/ de veces más lentos que la
    memoria
- El avance del desarrollo de hardware /juega en contra/ de reducir
  la diferencia
** Jerarquía de almacenamiento (vista clásica)
#+attr_latex: height=0.7\textheight
#+caption: Jerarquía de almacenamiento (Silberschatz, Galvin, Gagne; p. 11)
[[../img/jerarquia.png]]
** Jerarquía de almacenamiento (vista más real)
#+attr_latex: width=\textwidth
#+caption: La realidad de los niveles es menos rígida... (e incluso esta representación admite varias mejorías)
#+begin_src dot :file ltxpng/jearquia_memoria.png
digraph G {
	layout = dot;
	node [shape = box];
	rankdir = LR;
	
	Registros ;
	Cache ;
	Principal [label = "Memoria principal"];
	Electr [label = "Disco electrónico"];
	Magnet [label = "Disco magnético"];
	Optico [label = "Disco óptico"];
	Cinta [label = "Cintas magnéticas"];
	
	Registros -> Cache [dir = both];
	
	Cache -> Principal [dir = both];
	
	Principal -> Electr [dir = both];
	Principal -> Magnet [dir = both];
	
	Electr -> Magnet [dir = both];
	
	Electr -> Optico [dir = both];
	Magnet -> Optico [dir = both];
	
        Optico -> Cinta [dir = both];
	Electr -> Cinta [dir = both, minlen=2];
	Magnet -> Cinta [dir = both, minlen=2];
}
#+end_src
** Jerarquía de almacenamiento
#+BEGIN_CENTER
#+latex: {\scriptsize
#+caption: Velocidad y gestor de los principales niveles de memoria. (Silberschatz, Galvin, Gagne; p.28)
| Nivel           | 1                 | 2              | 3              | 4          |
|-----------------+-------------------+----------------+----------------+------------|
| *Nombre*        | Registros         | Cache          | Memoria princ. | Disco      |
| *Tamaño*        | <1KB              | <16MB          | <64GB          | >100GB     |
| *Tecnología*    | Multipuerto, CMOS | SRAM CMOS      | CMOS DRAM      | Magnética  |
| *Acceso (ns)*   | 0.25-0.5          | 0.5-25         | 80-250         | 5,000,000  |
| *Transf (MB/s)* | 20,000-100,000    | 5,000-10,000   | 1,000-5,000    | 20-150     |
| *Administra*    | Compilador        | Hardware       | Sist. Op.      | Sist. op.  |
| *Respaldado en* | Cache             | Memoria princ. | Disco          | CD o cinta |
#+latex: }
#+END_CENTER
** Almacenamiento /primario/ y /secundario/
- El procesador /sólo puede manejar directamente/ a la memoria
  principal
  - Se le conoce también como /almacenamiento primario/
  - *Ojo* ¡No es persistente! Es almacenamiento /durante el tiempo de
    ejecución de un programa/
- Discos, cintas, almacenamiento /estado sólido/ son /almacenamiento
  secundario/
  - Todas las computadoras lo manejan a través de /controladores/
** La memoria y los registros
#+BEGIN_CENTER
¿Qué son los registros?
#+END_CENTER
- Memoria super-rápida, ubicada /dentro/ del procesador
- Manejada /por referencia directa/, no por dirección
- Primeros procesadores: Basados en /acumuladores/
- Hoy: Típicamente ≥32 registros /largos/ (32, 64bit) de propósito
  general, mas algunos de propósito específico
- Además de los datos del proceso guardan su /estado/
- ¿Qué significa /gestionados por el compilador?

** Ejemplo de registros: Intel 8086/8088
#+latex: \begin{columns}\begin{column}{0.6\textwidth}
#+attr_latex: width=\columnwidth
#+caption: Imagen de Wikipedia
[[../img/registros_8086.png]]
#+latex: \end{column}\begin{column}{0.4\textwidth}
Registros /bandera/ (vector de booleanos): Overflow, Dirección,
Interrupción, Trampa/depuración, Signo, Cero, Acarreo auxiliar,
Paridad, Acarreo
#+latex: \end{column}\end{columns}

** Interrupciones y excepciones

- Interrupción :: Todo evento recibido por el sistema, de origen
                  /externo/ al flujo de la ejecución
  - Actividad en la red
  - Teclado o mouse
  - Alarma del temporizador
  - Datos del disco listos

- Excepción :: Eventos inesperados originados por el flujo del
               proceso
  - División sobre cero
  - Instrucción ilegal
  - Acceso a memoria no direccionada

** Manejo de interrupciones y excepciones
- Todo /evento/ es recibido por el sistema operativo (no por los
  procesos)
- Cuando ocurre cualquier /evento/, el hardware /lanza una
  interrupción/ que interrumpe el flujo de ejecución
- Rutina de /manejo de interrupciones/
  - Grabar estado del proceso desplazado y /cambiar contexto/
  - Atender la interrupción en /modo privilegiado/ (¡el menor tiempo
    posible!)
  - Una vez procesada, volver a invocar al /planificador/

** Llamadas al sistema
- De cierto modo análogas/complementarias a las interrupciones
- Mecanismo para que un proceso /solicite un servicio/ al sistema
  operativo
- Cada sistema operativo /expone/ un diferente juego de llamadas al
  sistema a través de su API
- Es en buena medida lo que determina la /compatibilidad de código/
  entre sistemas operativos
  - Contraposición: Compatibilidad binaria
  - APIs implementados por diversos sistemas: POSIX, Win32
- Interrupciones /enmascarables/ y /no enmascarables/
** Flujo de control en una llamada al sistema
#+attr_latex: width=\textwidth
#+caption: Transición del flujo entre espacio usuario y espacio núcleo en una llamada al sistema (Silberschatz, Galvin, Gagne; p.22)
[[../img/llamada_al_sistema.png]]
** Tipos de llamadas al sistema (1)
#+BEGIN_CENTER
Lista incompleta, meramente ejemplificando
#+END_CENTER
- Control de procesos :: Crear o finalizar un proceso, obtener
     atributos del proceso, esperar cierto tiempo, asignar o liberar
     memoria, etc.

- Manipulación de archivos :: Crear, borrar o renombrar un archivo;
     abrir o cerrar un archivo existente; modificar sus /metadatos/;
     leer o escribir de un /descriptor de archivo/ abierto, etc.

- Manipulación de dispositivos :: Solicitar o liberar un dispositivo;
     leer, escribir o reposicionarlo, y otras varias. Muchas de estas
     llamadas son análogas a las de manipulación de archivos, y varios
     sistemas operativos las ofrecen como una sola.
** Tipos de llamadas al sistema (2)
#+BEGIN_CENTER
Lista incompleta, meramente ejemplificando
#+END_CENTER
- Mantenimiento de la información :: Obtener o modificar la hora del
     sistema; obtener detalles acerca de procesos o archivos, etc.

- Comunicaciones :: Establecer una comunicación con determinado
                    proceso (local o remoto), aceptar una solicitud de
                    comunicación de otro proceso, intercambiar
                    información sobre un canal establecido

- Protección :: Consultar o modificar la información relativa al
                acceso de objetos en el disco, otros procesos, o la
                misma sesión de usuario

** Acceso directo a memoria (DMA)
#+BEGIN_CENTER
Problema: En la sección de un proceso en que está /limitado por
entrada-salida/, la transferencia de información se vuelve cuello de
botella
#+END_CENTER
- Modo /entrada/salida programada/
- Gran cantidad y frecuencia de interrupciones
- Imposible realizar trabajo real
#+BEGIN_CENTER
Respuesta: /Acceso Directo a Memoria/
#+END_CENTER

** Acceso directo a memoria (DMA)
- Orientado a dispositivos de gran ancho de banda
  - Unidades de disco
  - Multimedia
  - Red
  - Memoria y caché
- Transferencia en bloques, empleando un /controlador/
  - Dirección física base de memoria
  - Cantidad de datos a transferir
  - /Puerto/ del dispositivo
  - Dirección de la transferencia (/desde/ o /hacia/ memoria)
- Limitante: Contención en el bus de memoria

** Coherencia de caché
#+BEGIN_CENTER
¿Qué problema puede causar una transferencia /no iniciada por el
procesador/?
#+END_CENTER
- Incongruencia entre la memoria real y /páginas/ de caché existentes
  - Caché coherente :: Mecanismos /en hardware/ que notifican a los
       controladores de caché que las páginas están /sucias/
  - No coherente :: El sistema operativo debe realizar esta operación
- Sistemas híbridos en lo relativo a la coherencia
  - Caché de nivel superior (en el procesador) no coherente, cachés
    inferiores coherentes

** Multiprocesamiento
- Un entorno multiprocesador supone cambios en muchas estructuras y
  algoritmos básicos
  - Concurrencia /real/
- Desde 1970s, empleado para entornos especializados — Alto
  rendimiento
- Diferentes tipos de multiprocesamiento
  - SMP
  - ASMP
  - NUMA

** Ley de Moore
#+attr_latex: width=0.8\textwidth
[[../img/ley_de_moore.png]]

** Multiprocesamiento al escritorio
- Desde ~2005, común incluso en el escritorio
- Ley de Moore: El /número de transistores/ en un circuito integrado se duplica cada dos años (Imagen: Wikipedia)
- La carrera de los GHz; eficiencia térmica -> Múltiples núcleos
- Resultado: Ya no podemos /ignorar/ la complejidad del multiprocesamiento
  - ¿En qué nos afecta?

** Cómputo distribuído
- Procesos realizados en paralelo /entre computadoras independientes/
- Más formalmente, /entre procesadores que no comparten memoria/
- Modelos de cooperación: Sobre red local, sobre red global
- Modelos de cómputo distribuido
  - Clusters
  - Grids
  - Cómputo en /la nube/
    - /Web Services/
    - SaaS
    - IaaS
    - PaaS

** Sistemas de propósito especial
- Sistemas de /tiempo real/
  - Operaciones con tiempo de ejecución /prometido duro/
  - ¿Por qué no usar un sistema operativo estándar?
  - ¿Qué tanto podemos acercarlo?
- Particularidades de los sistemas reducidos (p.ej. portátiles)
  - Maximización de batería
  - Almacenamiento secundario
