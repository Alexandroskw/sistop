#+SETUPFILE: ../setup_laminas.org
#+TITLE: Relación con el hardware: Estructuras y funciones básicas
#+DATE: 2013-08-13

* Objetivo
** Objetivo de la sesión
* Jerarquía de almacenamiento
** ¿Tiempo de acceso? ¿Tasa de transferencia?
#+BEGIN_CENTER
Manejaremos muchas mediciones de velocidad. Debemos siempre tener en cuenta:
#+END_CENTER
- Tiempo de acceso :: ¿Cuánto tiempo toma /iniciar/ una
     transferencia? (medido en s, ms, ns). También llamado /latencia/.
- Tasa de transferencia :: Una vez iniciada, ¿a qué velocidad
     /sostenida/ podemos mantenerla? (medido en b/s, Kb/s, Mb/s)
#+BEGIN_CENTER
En el /mejor caso/, la transferencia de $x$ bits nos tomará $t_a +
xt_t$
#+END_CENTER
** Tipos de almacenamiento
#+BEGIN_CENTER
¿Cómo representar y guardar /adecuadamente/ los datos e instrucciones?
#+END_CENTER
- La memoria rápida es muy cara
- La memoria barata es muy lenta (hasta 1000 veces más lenta que el procesador)
- El almacenamiento /a largo plazo/ es mucho más barato, pero
  muchísimo más lento
  - El almacenamiento primario es /volátil/
  - Los discos llegan a ser /millones/ de veces más lentos que la
    memoria
- El avance del desarrollo de hardware /juega en contra/ de reducir
  la diferencia
** Jerarquía de almacenamiento (vista clásica)
#+attr_latex: height=0.7\textheight
#+caption: Jerarquía de almacenamiento (Silberschatz, Galvin, Gagne; p. 11)
[[../img/jerarquia.png]]
** Jerarquía de almacenamiento (vista más real)
#+attr_latex: height=0.7\textheight
##+attr_latex: width=\textwidth
#+caption: La realidad de los niveles es menos rígida... (e incluso esta representación admite varias mejorías)
[[../img/dot/jerarquia_memoria.png]]
** Jerarquía de almacenamiento
#+BEGIN_CENTER
#+latex: {\scriptsize
#+caption: Velocidad y gestor de los principales niveles de memoria. (Silberschatz, Galvin, Gagne; p.28)
| Nivel           | 1                 | 2              | 3              | 4          |
|-----------------+-------------------+----------------+----------------+------------|
| *Nombre*        | Registros         | Cache          | Memoria princ. | Disco      |
| *Tamaño*        | <1KB              | <16MB          | <64GB          | >100GB     |
| *Tecnología*    | Multipuerto, CMOS | SRAM CMOS      | CMOS DRAM      | Magnética  |
| *Acceso (ns)*   | 0.25-0.5          | 0.5-25         | 80-250         | 5,000,000  |
| *Transf (MB/s)* | 20,000-100,000    | 5,000-10,000   | 1,000-5,000    | 20-150     |
| *Administra*    | Compilador        | Hardware       | Sist. Op.      | Sist. op.  |
| *Respaldado en* | Cache             | Memoria princ. | Disco          | CD o cinta |
#+latex: }
#+END_CENTER
** Almacenamiento /primario/ y /secundario/
- El procesador /sólo puede manejar directamente/ a la memoria
  principal
  - Se le conoce también como /almacenamiento primario/
  - *Ojo* ¡No es persistente! Es almacenamiento /durante el tiempo de
    ejecución de un programa/
- Discos, cintas, almacenamiento /estado sólido/ son /almacenamiento
  secundario/
  - Todas las computadoras lo manejan a través de /controladores/
** La memoria y los registros
#+BEGIN_CENTER
¿Qué son los registros?
#+END_CENTER
- Memoria super-rápida, ubicada /dentro/ del procesador
- Manejada /por referencia directa/, no por dirección
- Primeros procesadores: Basados en /acumuladores/
- Hoy: Típicamente ≥32 registros /largos/ (32, 64bit) de propósito
  general, mas algunos de propósito específico
- Además de los datos del proceso guardan su /estado/
- ¿Qué significa /gestionados por el compilador?

** Ejemplo de registros: Intel 8086/8088
#+latex: \begin{columns}\begin{column}{0.6\textwidth}
#+attr_latex: width=\columnwidth
#+caption: Imagen de Wikipedia
[[../img/registros_8086.png]]
#+latex: \end{column}\begin{column}{0.4\textwidth}
Registros /bandera/ (vector de booleanos): Overflow, Dirección,
Interrupción, Trampa/depuración, Signo, Cero, Acarreo auxiliar,
Paridad, Acarreo
#+latex: \end{column}\end{columns}

** Interrupciones y excepciones

- Interrupción :: Todo evento recibido por el sistema, de origen
                  /externo/ al flujo de la ejecución
  - Actividad en la red
  - Teclado o mouse
  - Alarma del temporizador
  - Datos del disco listos

- Excepción :: Eventos inesperados originados por el flujo del
               proceso
  - División sobre cero
  - Instrucción ilegal
  - Acceso a memoria no direccionada

** Manejo de interrupciones y excepciones
- Todo /evento/ es recibido por el sistema operativo (no por los
  procesos)
- Cuando ocurre cualquier /evento/, el hardware /lanza una
  interrupción/ que interrumpe el flujo de ejecución
- Rutina de /manejo de interrupciones/
  - Grabar estado del proceso desplazado y /cambiar contexto/
  - Atender la interrupción en /modo privilegiado/ (¡el menor tiempo
    posible!)
  - Una vez procesada, volver a invocar al /planificador/

** Llamadas al sistema
- De cierto modo análogas/complementarias a las interrupciones
- Mecanismo para que un proceso /solicite un servicio/ al sistema
  operativo
- Cada sistema operativo /expone/ un diferente juego de llamadas al
  sistema a través de su API
- Es en buena medida lo que determina la /compatibilidad de código/
  entre sistemas operativos
  - Contraposición: Compatibilidad binaria
  - APIs implementados por diversos sistemas: POSIX, Win32
- Interrupciones /enmascarables/ y /no enmascarables/
** Flujo de control en una llamada al sistema
#+attr_latex: width=\textwidth
#+caption: Transición del flujo entre espacio usuario y espacio núcleo en una llamada al sistema (Silberschatz, Galvin, Gagne; p.22)
[[../img/dot/llamada_al_sistema.png]]
** Tipos de llamadas al sistema (1)
#+BEGIN_CENTER
Lista incompleta, meramente ejemplificando
#+END_CENTER
- Control de procesos :: Crear o finalizar un proceso, obtener
     atributos del proceso, esperar cierto tiempo, asignar o liberar
     memoria, etc.

- Manipulación de archivos :: Crear, borrar o renombrar un archivo;
     abrir o cerrar un archivo existente; modificar sus /metadatos/;
     leer o escribir de un /descriptor de archivo/ abierto, etc.

- Manipulación de dispositivos :: Solicitar o liberar un dispositivo;
     leer, escribir o reposicionarlo, y otras varias. Muchas de estas
     llamadas son análogas a las de manipulación de archivos, y varios
     sistemas operativos las ofrecen como una sola.
** Tipos de llamadas al sistema (2)
#+BEGIN_CENTER
Lista incompleta, meramente ejemplificando
#+END_CENTER
- Mantenimiento de la información :: Obtener o modificar la hora del
     sistema; obtener detalles acerca de procesos o archivos, etc.

- Comunicaciones :: Establecer una comunicación con determinado
                    proceso (local o remoto), aceptar una solicitud de
                    comunicación de otro proceso, intercambiar
                    información sobre un canal establecido

- Protección :: Consultar o modificar la información relativa al
                acceso de objetos en el disco, otros procesos, o la
                misma sesión de usuario

** Acceso directo a memoria (DMA)
#+BEGIN_CENTER
Problema: En la sección de un proceso en que está /limitado por
entrada-salida/, la transferencia de información se vuelve cuello de
botella
#+END_CENTER
- Modo /entrada/salida programada/
- Gran cantidad y frecuencia de interrupciones
- Imposible realizar trabajo real
#+BEGIN_CENTER
Respuesta: /Acceso Directo a Memoria/
#+END_CENTER

** Acceso directo a memoria (DMA)
- Orientado a dispositivos de gran ancho de banda
  - Unidades de disco
  - Multimedia
  - Red
  - Memoria y caché
- Transferencia en bloques, empleando un /controlador/
  - Dirección física base de memoria
  - Cantidad de datos a transferir
  - /Puerto/ del dispositivo
  - Dirección de la transferencia (/desde/ o /hacia/ memoria)
- Limitante: Contención en el bus de memoria

** Coherencia de caché
#+BEGIN_CENTER
¿Qué problema puede causar una transferencia /no iniciada por el
procesador/?
#+END_CENTER
- Incongruencia entre la memoria real y /páginas/ de caché existentes
  - Caché coherente :: Mecanismos /en hardware/ que notifican a los
       controladores de caché que las páginas están /sucias/
  - No coherente :: El sistema operativo debe realizar esta operación
- Sistemas híbridos en lo relativo a la coherencia
  - Caché de nivel superior (en el procesador) no coherente, cachés
    inferiores coherentes

* Multiprocesamiento y cómputo distribuído
** Multiprocesamiento
- Un entorno multiprocesador supone cambios en muchas estructuras y
  algoritmos básicos
  - Concurrencia /real/
- Desde 1970s, empleado para entornos especializados — Alto
  rendimiento
- Diferentes tipos de multiprocesamiento
  - SMP
  - ASMP
  - NUMA

** Ley de Moore
#+attr_latex: height=0.7\textheight
[[../img/gnuplot/ley_de_moore.png]]

** Multiprocesamiento al escritorio
- Desde ~2005, común incluso en el escritorio
- Ley de Moore: El /número de transistores/ en un circuito integrado se duplica cada dos años
- La carrera de los GHz; eficiencia térmica -> Múltiples núcleos
- Resultado: Ya no podemos /ignorar/ la complejidad del multiprocesamiento
  - ¿En qué nos afecta?

** Cómputo distribuído
- Procesos realizados en paralelo /entre computadoras independientes/
- Más formalmente, /entre procesadores que no comparten memoria/
- Modelos de cooperación: Sobre red local, sobre red global
- Modelos de cómputo distribuido
  - Clusters
  - Grids
  - Cómputo en /la nube/
    - /Web Services/
    - SaaS
    - IaaS
    - PaaS

** Sistemas de propósito especial
- Sistemas de /tiempo real/
  - Operaciones con tiempo de ejecución /prometido duro/
  - ¿Por qué no usar un sistema operativo estándar?
  - ¿Qué tanto podemos acercarlo?
- Particularidades de los sistemas reducidos (p.ej. portátiles)
  - Maximización de batería
  - Almacenamiento secundario
* Conceptos nuevos
** En esta presentación vimos...
